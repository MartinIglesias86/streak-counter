{"version":3,"file":"index.module.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["\r\nexport interface Streak {\r\n  currentCount: number\r\n  startDate: string\r\n  lastLoginDate: string\r\n}\r\n\r\nexport const KEY = 'streak'\r\n\r\nexport function formattedDate(date: Date): string {\r\n    // returns date as 11/11/2021\r\n    // other times it returns 11/11/2021, 12:00:00 AM\r\n    // which is why we call the .split at the end\r\n    return date.toLocaleDateString('en-US')\r\n}\r\n    \r\nexport function buildStreak(\r\n  date: Date,\r\n  overrideDefaults?: Partial<Streak>\r\n): Streak {\r\n  const defaultStreak = {\r\n    currentCount: 1,\r\n    startDate: formattedDate(date),\r\n    lastLoginDate: formattedDate(date)\r\n  }\r\n  return {\r\n    ...defaultStreak,\r\n    ...overrideDefaults\r\n  }\r\n}\r\n\r\nexport function updateStreak(storage: Storage, streak: Streak): void {\r\n  storage.setItem(KEY, JSON.stringify(streak))\r\n}","import { buildStreak, formattedDate, KEY, Streak, updateStreak } from \"./utils\"\r\n\r\nfunction differenceInDays(dateLeft: Date, dateRight: Date): number {\r\n  const diffTime = Math.abs(dateLeft.getTime() - dateRight.getTime())\r\n  const differenceInDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\r\n  return differenceInDays\r\n}\r\n\r\nfunction shouldIncrementOrResetStreakCount(\r\n  currenDate: Date,\r\n  lastLoginDate: string\r\n): 'increment' | 'reset' | 'none' {\r\n  const difference = differenceInDays(currenDate, new Date(lastLoginDate))\r\n  //Same-day login, so no need to increment or reset\r\n  if (difference === 0) {\r\n    return 'none'\r\n  }\r\n  //This means they logged in the day after the currentDate\r\n  if (difference === 1) {\r\n    return 'increment'\r\n  }\r\n  //Otherwise they logged in after a day, which would\r\n  //break the streak\r\n  return 'reset'\r\n}\r\n\r\nexport function streakCounter(storage: Storage, date: Date): Streak {\r\n  const streakInLocalStorage = storage.getItem(KEY)\r\n  if (streakInLocalStorage) {\r\n    try { \r\n      const streak = JSON.parse(streakInLocalStorage) as Streak\r\n      const state = shouldIncrementOrResetStreakCount(\r\n        date,\r\n        streak.lastLoginDate\r\n      )\r\n      const SHOULD_INCREMENT = state === 'increment'\r\n      const SHOULD_RESET = state === 'reset'\r\n      if (SHOULD_INCREMENT) { \r\n        const updatedStreak = buildStreak(date, {\r\n          startDate: streak.startDate,\r\n          currentCount: streak.currentCount + 1,\r\n          lastLoginDate: formattedDate(date)\r\n        })\r\n        //Store the streak in localStorage\r\n        updateStreak(storage, updatedStreak)\r\n        return updatedStreak\r\n      }\r\n      if (SHOULD_RESET) {\r\n        const updatedStreak = buildStreak(date)\r\n        //Store the streak in localStorage\r\n        updateStreak(storage, updatedStreak)\r\n        return updatedStreak\r\n      }\r\n      \r\n      return streak\r\n    } catch (e) {\r\n      console.error('Failed to parse streak from localStorage')\r\n    }\r\n  }\r\n\r\n\r\n  const streak = buildStreak(date)\r\n  //Store the streak in localStorage\r\n  updateStreak(storage, streak)\r\n  return streak\r\n}"],"names":["KEY","formattedDate","date","toLocaleDateString","buildStreak","overrideDefaults","defaultStreak","currentCount","startDate","lastLoginDate","updateStreak","storage","streak","setItem","JSON","stringify","streakCounter","dateLeft","dateRight","diffTime","difference","streakInLocalStorage","getItem","parse","state","Date","Math","abs","getTime","ceil","SHOULD_RESET","updatedStreak","_updatedStreak","e","console","error"],"mappings":"wOAOgBA,EAAG,SAEHC,SAAAA,EAAcC,GAI1B,OAAWA,EAACC,mBAAmB,QACnC,CAEgBC,SAAAA,EACdF,EACAG,GAOA,OACKC,EAAAA,CAAAA,EANiB,CACpBC,aAAc,EACdC,UAAWP,EAAcC,GACzBO,cAAeR,EAAcC,IAI1BG,EAEP,CAEgB,SAAYK,EAACC,EAAkBC,GAC7CD,EAAQE,QAAQb,EAAKc,KAAKC,UAAUH,GACtC,CCPgB,SAAaI,EAACL,EAAkBT,GAC9C,IAzBwBe,EAAgBC,EAClCC,EASAC,EAeoBC,EAAGV,EAAQW,QAAQtB,GAC7C,GAAIqB,EACF,IACE,MAAeP,KAAKS,MAAMF,GACpBG,GA7BcP,EA8BlBf,EA9BkCgB,EAUQ,IAAQO,KAqBlDb,EAAOH,eA9BPU,EAAWO,KAAKC,IAAIV,EAASW,UAAYV,EAAUU,WAWtC,KAFbR,EARmBM,KAAKG,KAAKV,EAAY,QAWtC,OAGU,IAAfC,EACK,YAIF,SAaeU,EAAa,UAAVN,EACrB,GAFmC,cAAVA,EAEH,CACpB,IAAmBO,EAAG3B,EAAYF,EAAM,CACtCM,UAAWI,EAAOJ,UAClBD,aAAcK,EAAOL,aAAe,EACpCE,cAAeR,EAAcC,KAI/B,OADAQ,EAAaC,EAASoB,GACfA,CACR,CACD,GAAID,EAAc,CAChB,IAAmBE,EAAG5B,EAAYF,GAGlC,OADAQ,EAAaC,EAASoB,GAEvBC,CAAA,CAED,OAAOpB,CAGR,CAFC,MAAOqB,GACPC,QAAQC,MAAM,2CACf,CAIH,IAAYvB,EAAGR,EAAYF,GAG3B,OADAQ,EAAaC,EAASC,GAExBA,CAAA"}